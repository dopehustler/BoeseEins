/*  
* BoeseEins - Simples Würfelspiel  
* @author  Cédric Tschudin
* @version 1.3 
*/

import java.awt.Color;
import java.awt.event.ActionEvent;					
import java.awt.event.ActionListener;
import java.util.Arrays;
import java.util.Scanner;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

/*
 * Hauptklasse, baut JFrames auf und besitzt ActionListener
 */

public class FrameBoeseEins extends JFrame implements ActionListener {

/*
 * Aufruf game-Klasse und Scanner
 */
	GameBoeseEins game = new GameBoeseEins();
	Scanner sc = new Scanner(System.in);

	/*
	 * Diverse Variabeln
	 */
	
	public static int anzWuerfe = 0;					// Anzahl Würfe in einer Runde
	public static boolean einser = false;				// True wenn einser gewürfelt
	public static boolean player1turn = true;			// True wenn Spieler 1 an der Reihe ist
	public static String[] combined = new String[5];	// String-Array für Zahlenausgabe in JLabels
	public static int player1total = 0;					// Punktzahl Gesamt Spieler 1
	public static int player2total = 0;					//        ""        SPieler 2
	public static int ZwiStand = 0;						// Summe der Würfe (Augen) einer Runde

	int y1 = 5;											// Variable für y-Koordinate der generierten JLabel (Player1)
	int y2 = 5;											// Variable für y-Koordinate der generierten JLabel (Player2)
	int x = 90;											// x-Koordinate für scores-Label
	int roundnum = 0;									// Rundenzähler ("Würfel weitergeben" beendet Runde)
	String player1;										// Name Player1
	String player2;										// Name Player2

	/*
	 * Rahmen, Farben, JPanels, JLabels, JButtons für den GUI-Aufbau
	 */
	
	Border border = BorderFactory.createLineBorder(Color.BLACK, 1);
	Color color1 = new Color(236, 236, 236);
	JPanel panel = new JPanel();
	JLabel p1label, p2label, p1score, p2score, display1, display2, display3,
			display4, display5;
	JButton weiter, reset, wuerfeln;
	
/*
 * Konstruktor für den Frame
 */
	
	public FrameBoeseEins() {

		/*
		 * Abfrage Spielernamen
		 */
		System.out.println("Player 1:");
		player1 = sc.next();
		System.out.println("Player 2:");
		player2 = sc.next();

		/*
		 * Parameter für JFrame
		 */
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);				// !!-Beendet den Prozess (wichtig)-!!
		getContentPane().setBackground(Color.LIGHT_GRAY);
		setLayout(null);
		setSize(255, 435);
		setLocation(500, 70);
		setTitle("Böse Eins");
		setVisible(true);

		/*
		 * Parameter für JLabel Spielername (Player1)
		 */
		p1label = new JLabel(player1);
		p1label.setBounds(10, 30, 70, 30);
		p1label.setBorder(border);
		p1label.setBackground(Color.green);
		p1label.setOpaque(true);									// Für JLabels mit Background. Wenn 'false', JLabel transparent
		p1label.setHorizontalAlignment(SwingConstants.CENTER);		// Text in JLabel wird zentriert
		add(p1label);
		p1label.setVisible(true);

		/*
		 * Parameter für JLabel Spielername (Player2)
		 */
		p2label = new JLabel("   " + player2 + "   ");
		p2label.setBounds(120, 30, 70, 30);
		p2label.setBorder(border);
		p2label.setBackground(color1);
		p2label.setOpaque(true);
		p2label.setHorizontalAlignment(SwingConstants.CENTER);
		add(p2label);
		p2label.setVisible(true);

		/*
		 * Parameter für JLabel, welches Wurf 1 anzeigt (display1)
		 */
		display1 = new JLabel();
		display1.setBounds(10, 70, 20, 20);
		display1.setBorder(border);
		display1.setBackground(color1);
		display1.setOpaque(true);	
		display1.setHorizontalAlignment(SwingConstants.CENTER);
		add(display1);
		display1.setVisible(true);

		/*
		 * Parameter für JLabel, welches Wurf 2 anzeigt (display2)
		 */
		display2 = new JLabel();
		display2.setBounds(50, 70, 20, 20);
		display2.setBorder(border);
		display2.setBackground(color1);
		display2.setOpaque(true);
		display2.setHorizontalAlignment(SwingConstants.CENTER);
		add(display2);
		display2.setVisible(true);

		/*
		 * Parameter für JLabel, welches Wurf 3 anzeigt (display3)
		 */
		display3 = new JLabel();
		display3.setBounds(90, 70, 20, 20);
		display3.setBorder(border);
		display3.setBackground(color1);
		display3.setOpaque(true);
		display3.setHorizontalAlignment(SwingConstants.CENTER);
		add(display3);
		display3.setVisible(true);

		/*
		 * Parameter für JLabel, welches Wurf 4 anzeigt (display4)
		 */
		display4 = new JLabel();
		display4.setBounds(130, 70, 20, 20);
		display4.setBorder(border);
		display4.setBackground(color1);
		display4.setOpaque(true);
		display4.setHorizontalAlignment(SwingConstants.CENTER);
		add(display4);
		display4.setVisible(true);

		/*
		 * Parameter für JLabel, welches Wurf 5 anzeigt (display5)
		 */
		display5 = new JLabel();
		display5.setBounds(170, 70, 20, 20);
		display5.setBorder(border);
		display5.setBackground(color1);
		display5.setOpaque(true);
		display5.setHorizontalAlignment(SwingConstants.CENTER);
		add(display5);
		display5.setVisible(true);
		
		/*
		 * Parameter für JPanel, "Leinwand" für generierte Arrays
		 */
		panel = new JPanel();
		panel.setBounds(0, 100, 240, 200);
		panel.setBackground(Color.LIGHT_GRAY);
		add(panel);
		panel.setLayout(null);
		panel.setVisible(true);

		/*
		 * Parameter für JLabel, Spielstandanzeige Player1 (p1score)
		 */
		p1score = new JLabel("0");
		p1score.setBounds(10, 340, 30, 20);
		p1score.setBorder(border);
		p1score.setBackground(color1);
		p1score.setOpaque(true);
		p1score.setHorizontalAlignment(SwingConstants.CENTER);
		add(p1score);
		p1score.setVisible(true);

		/*
		 * Parameter für JLabel, Spielstandanzeige Player2 (p2score)
		 */
		p2score = new JLabel("0");
		p2score.setBounds(200, 340, 30, 20);
		p2score.setBorder(border);
		p2score.setBackground(color1);
		p2score.setOpaque(true);
		p2score.setHorizontalAlignment(SwingConstants.CENTER);
		add(p2score);
		p2score.setVisible(true);

		/*
		 * Parameter für JButton "Würfeln" (wuerfeln)
		 */
		wuerfeln = new JButton("Würfeln!");
		wuerfeln.setBounds(50, 310, 140, 20);
		wuerfeln.setBorder(border);
		add(wuerfeln);
		wuerfeln.addActionListener(this);
		wuerfeln.setVisible(true);
		wuerfeln.revalidate();								// ohne Aufrufe von repaint() und revalidate() werden dynamische Swing-Elemente
		wuerfeln.repaint();									// teilweise schlecht oder nicht angezeigt

		/*
		 * Parameter für JButton "Würfel weitergeben" (weiter)
		 */
		weiter = new JButton("Würfel weitergeben!");
		weiter.setBounds(50, 340, 140, 20);
		weiter.setBorder(border);
		add(weiter);
		weiter.addActionListener(this);
		weiter.setVisible(true);
		weiter.revalidate();
		weiter.repaint();
		
		/*
		 * Parameter für JButton "Neue Runde" (reset)
		 */
		reset = new JButton("Neue Runde!");
		reset.setBounds(50, 370, 140, 20);
		reset.setBorder(border);
		add(reset);
		reset.addActionListener(this);
		reset.setVisible(true);
		reset.setEnabled(false);
		reset.revalidate();
		reset.repaint();
	}

	/*
	 * ActionPerformed-Methode des ActionListeners
	 */
	public void actionPerformed(ActionEvent e) {

		/*
		 * Bei drücken von "Würfel weitergeben"
		 */
		if (e.getSource() == weiter) {

			/*
			 * Panel-Putzer: Wenn 8 Array-Zeilen auf dem Panel sind, wird der alte Inhalt gelöscht
			 */
			if (roundnum == 16) {
				panel.removeAll();
				panel.revalidate();
				panel.repaint();
				y1 = 5;					// y1 und y1 dienen zur Platzierung der Array-Labels auf dem JPanel. y1 ist dabei die y-Position
				y2 = 5;					// für Spieler 1, y2 jene für Spieler 2.
				roundnum = 0;			
			}

			/*
			 * Die in den Displays gewürfelten Zahlen werden zu einem Array kombiniert
			 */
			combined[0] = display1.getText();
			combined[1] = display2.getText();
			combined[2] = display3.getText();
			combined[3] = display4.getText();
			combined[4] = display5.getText();

			/*
			 * Die Displays werden wieder geleert
			 */
			display1.setText("");
			display2.setText("");
			display3.setText("");
			display4.setText("");
			display5.setText("");

			/*
			 * Der Button "Würfeln" wird aktiviert, Wurfzähler auf 0 gesetzt, damit der nächste Spieler würfeln kann
			 */
			wuerfeln.setEnabled(true);
			anzWuerfe = 0;

			String wuerfe = Arrays.toString(combined);			//Der kombinierte Array wird in einen einzelnen String verwandelt 
			JLabel labels[] = new JLabel[16];					//JLabel-Array für max. 16 verschiedene labels pro Panel
			JLabel scores[] = new JLabel[16];					//JLabel-Array für max. 16 verschiedene scores pro Panel
			
			/*
			 * Wenn ein einser fiell, wird der Zwischenstand (gewonnene Punkte d. Runde) auf 0 gesetzt
			 */
			if (einser == true) {
				ZwiStand = 0;
			}
			
			/*
			 * Wenn Spieler 1 an der Reihe ist und keine 1 gewürfelt hat, wird der Zwischenstand seienm Konto gutgeschrieben
			 */
			if (player1turn == true) {

				if (einser == false) {
					player1total = player1total + ZwiStand;
				}
			} else {

				/*
				 * Das Obige für Spieler 2 (player1turn(false))
				 */
				if (einser == false) {
					player2total = player2total + ZwiStand;
				}
			}

			/*
			 * Wenn Spieler 1 an der Reihe ist, wird ein JLabel generiert
			 * Erkl. Koordinaten Player1-Labels: 	x=10, y1=5  (Runde 1) 
			 * 										x=10, y1=30 (Runde 3)
			 * 										x=10, y1=55 (Runde 5)
			 */
			if (player1turn == true) {

				p1label.setBackground(color1);
				p2label.setBackground(Color.green);

				labels[roundnum] = new JLabel(wuerfe);
				labels[roundnum].setBounds(10, y1, 70, 20);		//ausschlaggebende Zeile für autom. generierte JLabels
				labels[roundnum].setBorder(border);
				labels[roundnum].setOpaque(true);
				labels[roundnum].setBackground(color1);
				labels[roundnum].setHorizontalAlignment(SwingConstants.CENTER);
				panel.add(labels[roundnum]);
				labels[roundnum].setVisible(true);
				labels[roundnum].revalidate();
				labels[roundnum].repaint();

				y1 += 25;							//y1 wird erhöht
				player1turn = false;				//Nächster Spieler an der Reihe

			} else {

				/*
				 * Wenn Spieler 2 an der Reihe ist, wird ein JLabel generiert
				 * Erkl. Koordinaten Player2-Labels: 	x=120, y1=5  (Runde 2) 
				 * 										x=120, y1=30 (Runde 4)
				 * 										x=120, y1=55 (Runde 6)
				 */
				p1label.setBackground(Color.green);
				p2label.setBackground(color1);

				labels[roundnum] = new JLabel(wuerfe);
				labels[roundnum].setBounds(120, y2, 70, 20);
				labels[roundnum].setBorder(border);
				labels[roundnum].setOpaque(true);
				labels[roundnum].setBackground(color1);
				labels[roundnum].setHorizontalAlignment(SwingConstants.CENTER);
				panel.add(labels[roundnum]);
				labels[roundnum].setVisible(true);
				labels[roundnum].revalidate();
				labels[roundnum].repaint();

				y2 += 25;							//y2 wird erhöht
				player1turn = true;
			}
			
			/*
			 * Platzierung der Score-Labels auf x-Achse
			 */
			if (player1turn == false) {				
				x = 90;
			} else {
				x = 200;
			}
			
			/*
			 * Score-Labels werden generiert
			 */
			scores[roundnum] = new JLabel(String.valueOf(ZwiStand));
			scores[roundnum].setBounds(x, y1 - 25, 20, 20);					//y-25, da y1 dieser Runde bereits um 25 erhöht wurde
			scores[roundnum].setBorder(border);
			scores[roundnum].setOpaque(true);
			scores[roundnum].setHorizontalAlignment(SwingConstants.CENTER);
			if (ZwiStand == 0) {
				scores[roundnum].setBackground(Color.red);					//wenn Zwischenstand 0, ist das score-label rot
			} else {
				scores[roundnum].setBackground(Color.green);				//Wenn Zwischenstand > 0, ist das score-label grün
			}
			panel.add(scores[roundnum]);
			scores[roundnum].setVisible(true);
			scores[roundnum].revalidate();
			scores[roundnum].repaint();

			/*
			 * Das jeweilige Total wird in einen String umgewandelt und im jeweiligen Label (p1score oder p2score) angezeigt
			 */
			p1score.setText(String.valueOf(player1total));
			p2score.setText(String.valueOf(player2total));

			/*
			 * Player 1 gewinnt, wenn er >100 Punkte erreicht
			 * Farben werden entsprechend gesetzt und die richtigen Buttons aktiviert/deaktiviert
			 */
			if (player1total >= 100) {
				p1label.setBackground(Color.yellow);
				p1score.setBackground(Color.yellow);
				p2label.setBackground(color1);
				weiter.setText(player1 + " gewinnt!");
				wuerfeln.setEnabled(false);
				weiter.setEnabled(false);
				reset.setEnabled(true);
			}
			
			/*
			 * Player 2 gewinnt, wenn er >100 Punkte erreicht
			 * Farben werden entsprechend gesetzt und die richtigen Buttons aktiviert/deaktiviert
			 */
			if (player2total >= 100) {
				p2label.setBackground(Color.yellow);
				p2score.setBackground(Color.yellow);
				p1label.setBackground(color1);
				weiter.setText(player2 + " gewinnt!");
				wuerfeln.setEnabled(false);
				weiter.setEnabled(false);
				reset.setEnabled(true);
			}

			/* Runde beendet
			 * Zwischenstand wird zurückgesetzt
			 * Rundenzähler wird um 1 erhöht
			 * einser wird wieder auf false gesetzt
			 */
			ZwiStand = 0;
			roundnum++;
			einser = false;
		}

		/*
		 * Bei drücken von "Neue Runde" (erst aktiv, sobald der Gewinner feststeht.
		 */
		if (e.getSource() == reset) {

			/*
			 * Veränderte Variablen werden wieder auf ihren Ausgangswert zurückgesetzt.
			 * Button "Neue Runde" wird deaktiviert, "Würfeln" und "Würfel weitergeben" aktiviert.
			 * Namen bleiben erhalten
			 */
			
			p1label.setBackground(Color.green);
			p2label.setBackground(color1);
			p1score.setBackground(color1);
			p2score.setBackground(color1);

			panel.removeAll();
			panel.revalidate();
			panel.repaint();

			weiter.setText("Nächster Zug!");
			weiter.setEnabled(true);
			wuerfeln.setEnabled(true);
			roundnum = 0;
			y1 = 0;
			y2 = 0;
			x = 90;
			player1total = 0;
			player2total = 0;
			ZwiStand = 0;
			player1turn = true;
			reset.setEnabled(false);
			p1score.setText("0");
			p1score.revalidate();
			p1score.repaint();
			p2score.setText("0");
			p2score.revalidate();
			p2score.repaint();

		}
		
		/*
		 * Bei drücken von "Würfeln"
		 */
		if (e.getSource() == wuerfeln) {
			int wurf = game.wuerfe();						//Zufallszahl wird geholt
			anzWuerfe++;									//Wurfzähler wird erhöht

			switch (anzWuerfe) {
			case 1:
				display1.setText(String.valueOf(wurf));		// Anzeige Display1
				break;
			case 2:
				display2.setText(String.valueOf(wurf));		// Anzeige Display2
				break;
			case 3:
				display3.setText(String.valueOf(wurf));		// Anzeige Display3
				break;
			case 4:
				display4.setText(String.valueOf(wurf));		// Anzeige Display4
				break;
			case 5:
				display5.setText(String.valueOf(wurf));		// Anzeige Display5
				break;
			}
			if (anzWuerfe >= 5) {
				wuerfeln.setEnabled(false);					//Button "Würfeln" wird deaktiviert, sobald 5 mal gewürfelt wurde
			}

			if (wurf == 1) {
				einser = true;
				wuerfeln.setEnabled(false);					//Button "Würfeln" wird deaktiviert, sobald ein einser fällt
			}

			ZwiStand += wurf;								//der jeweilige Wurf wird mit dem Zwischenstand verrechnet
		}
	}
}
